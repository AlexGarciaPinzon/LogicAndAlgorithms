// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name alertUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonUI
import DeveloperToolsSupport
import Foundation
import ImageKit
import Middle
import Swift
import SwiftUI
import Tools
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import alertUI
public protocol AlertsStateManagement {
  func suspend()
  func unpause()
}
public protocol AlertsRouterActions {
  func presentAlert(_ alert: alertUI.AlertStruct)
  func dismissAlert(_ alert: alertUI.AlertStruct)
  func dismissAlert(_ alertIdentifier: alertUI.AlertIdentifier)
}
public protocol ToastersRouterActions {
  func presentToaster(_ toaster: Middle.PTUEnhancedMessage, completion: @escaping (CommonUI.ToasterMessageviewResult) -> Swift.Void)
  func dismissToaster(_ toaster: Middle.PTUEnhancedMessage)
}
public protocol AlertsActions {
  func showDefaultAlert(title: Swift.String?, message: Swift.String?, actions: [CommonUI.AlertAction], alertIdentifier: alertUI.AlertIdentifier?, actionHandler: CommonUI.AlertMessageviewHandler?)
  func showDefaultAlert(title: Swift.String?, message: Swift.String?, actions: [CommonUI.AlertAction], priority: alertUI.Priority, alertIdentifier: alertUI.AlertIdentifier?, actionHandler: CommonUI.AlertMessageviewHandler?)
  func showDefaultAlert(title: CommonUI.AlertLabelTitle?, message: CommonUI.AlertLabelTitle?, style: CommonUI.PTUStyleView, actions: [CommonUI.AlertAction], alertIdentifier: alertUI.AlertIdentifier?, actionHandler: CommonUI.AlertMessageviewHandler?)
  func showEnhancedMessageAlert(title: Swift.String?, image: UIKit.UIImage?, actions: [alertUI.EnhancedMessageAction], alertIdentifier: alertUI.AlertIdentifier?, completion: @escaping (CommonUI.EnhancedMessageAlertViewResult) -> Swift.Void)
  func showGameListAlert(title: Swift.String?, message: Swift.String?, games: [CommonUI.AlertGameModel], actions: [CommonUI.AlertAction], alertIdentifier: alertUI.AlertIdentifier?)
  func showDropDownAlert(message: Swift.String?, isHiddenDropDown: Swift.Bool, dropdownOptions: [Swift.String], actions: [CommonUI.AlertAction], completion: ((Swift.UInt?) -> Swift.Void)?)
}
public protocol ToastersActions {
  func showToaster(_ message: Middle.PTUEnhancedMessage, completion: @escaping (CommonUI.ToasterMessageviewResult) -> Swift.Void)
  func hideToaster(_ message: Middle.PTUEnhancedMessage)
}
public protocol AlertsControllerDelegate : ObjectiveC.NSObjectProtocol {
  func alertConntroller(_ alertController: alertUI.AlertsController, willPresentAlert alert: alertUI.AlertStruct)
  func alertConntroller(_ alertController: alertUI.AlertsController, didPresentAlert alert: alertUI.AlertStruct)
  func alertConntroller(_ alertController: alertUI.AlertsController, didDisappear alert: alertUI.AlertStruct)
}
@objc open class AlertsController : ObjectiveC.NSObject {
  weak public var delegate: (any alertUI.AlertsControllerDelegate)?
  public init(containerView: UIKit.UIView?, overLayeredCustomView: UIKit.UIView?, urlBuilder: Middle.PTUURLBuilder, commonUIConfig: [Swift.AnyHashable : Any], stylesUIConfig: [Swift.AnyHashable : Any])
  public func setSupportedOrientations(orientationMask: UIKit.UIInterfaceOrientationMask)
  public func finish()
  @objc deinit
}
extension alertUI.AlertsController : alertUI.AlertsStateManagement {
  public func suspend()
  public func unpause()
}
extension alertUI.AlertsController : alertUI.AlertsRouterActions {
  public func presentAlert(_ alert: alertUI.AlertStruct)
  public func dismissAlert(_ alert: alertUI.AlertStruct)
  public func dismissAlert(_ alertIdentifier: alertUI.AlertIdentifier)
}
extension alertUI.AlertsController : alertUI.AlertsActions {
  public func showDefaultAlert(title: Swift.String? = nil, message: Swift.String? = nil, actions: [CommonUI.AlertAction], alertIdentifier: alertUI.AlertIdentifier? = nil, actionHandler: CommonUI.AlertMessageviewHandler? = nil)
  public func showDefaultAlert(title: Swift.String? = nil, message: Swift.String? = nil, actions: [CommonUI.AlertAction], priority: alertUI.Priority, alertIdentifier: alertUI.AlertIdentifier? = nil, actionHandler: CommonUI.AlertMessageviewHandler? = nil)
  public func showDefaultAlert(title: CommonUI.AlertLabelTitle? = nil, message: CommonUI.AlertLabelTitle? = nil, style: CommonUI.PTUStyleView, actions: [CommonUI.AlertAction], alertIdentifier: alertUI.AlertIdentifier? = nil, actionHandler: CommonUI.AlertMessageviewHandler? = nil)
  public func showEnhancedMessageAlert(title: Swift.String? = nil, image: UIKit.UIImage? = nil, actions: [alertUI.EnhancedMessageAction], alertIdentifier: alertUI.AlertIdentifier? = nil, completion: @escaping (CommonUI.EnhancedMessageAlertViewResult) -> Swift.Void)
  public func showGameListAlert(title: Swift.String? = nil, message: Swift.String? = nil, games: [CommonUI.AlertGameModel], actions: [CommonUI.AlertAction], alertIdentifier: alertUI.AlertIdentifier? = nil)
  public func showDropDownAlert(message: Swift.String?, isHiddenDropDown: Swift.Bool, dropdownOptions: [Swift.String], actions: [CommonUI.AlertAction], completion: ((Swift.UInt?) -> Swift.Void)? = nil)
}
extension alertUI.AlertsController : alertUI.ToastersActions {
  public func showToaster(_ message: Middle.PTUEnhancedMessage, completion: @escaping (CommonUI.ToasterMessageviewResult) -> Swift.Void)
  public func hideToaster(_ message: Middle.PTUEnhancedMessage)
}
extension alertUI.AlertsController : alertUI.AlertsRouterDelegate {
  public func alertRouter(_ alertRouter: alertUI.AlertsRouter, willPresentAlert alert: alertUI.AlertStruct)
  public func alertRouter(_ alertRouter: alertUI.AlertsRouter, didPresentAlert alert: alertUI.AlertStruct)
  public func alertRouter(_ alertRouter: alertUI.AlertsRouter, didDisappear alert: alertUI.AlertStruct)
}
extension Foundation.NSDate : Swift.Comparable {
  public static func < (lhs: Foundation.NSDate, rhs: Foundation.NSDate) -> Swift.Bool
}
public class ToasterModel {
  public init(message: Middle.PTUEnhancedMessage, handler: @escaping (CommonUI.ToasterMessageviewResult) -> Swift.Void)
  @objc deinit
}
extension alertUI.ToasterModel : Swift.Equatable {
  public static func == (lhs: alertUI.ToasterModel, rhs: alertUI.ToasterModel) -> Swift.Bool
}
public protocol AlertsRouterDelegate : ObjectiveC.NSObjectProtocol {
  func alertRouter(_ alertRouter: alertUI.AlertsRouter, willPresentAlert alert: alertUI.AlertStruct)
  func alertRouter(_ alertRouter: alertUI.AlertsRouter, didPresentAlert alert: alertUI.AlertStruct)
  func alertRouter(_ alertRouter: alertUI.AlertsRouter, didDisappear alert: alertUI.AlertStruct)
}
@_hasMissingDesignatedInitializers public class AlertsRouter {
  @objc deinit
}
extension alertUI.AlertsRouter : alertUI.AlertsStateManagement {
  public func suspend()
  public func unpause()
}
extension alertUI.AlertsRouter : alertUI.AlertsRouterActions {
  public func presentAlert(_ alert: alertUI.AlertStruct)
  public func dismissAlert(_ alert: alertUI.AlertStruct)
  public func dismissAlert(_ alertIdentifier: alertUI.AlertIdentifier)
}
public struct EnhancedMessageAction {
  public let title: Swift.String
  public let type: CommonUI.AlertButtonType
  public let handler: () -> Swift.Void
  public init(title: Swift.String, type: CommonUI.AlertButtonType, handler: @escaping () -> Swift.Void)
}
public enum Priority : Swift.UInt, Swift.CaseIterable {
  case emergency, high, normal, low
  public init?(rawValue: Swift.UInt)
  public typealias AllCases = [alertUI.Priority]
  public typealias RawValue = Swift.UInt
  public static var allCases: [alertUI.Priority] {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
public typealias AlertIdentifier = Swift.String
public struct AlertStruct {
  public init(view: UIKit.UIView, priority: alertUI.Priority = .normal, identifier: alertUI.AlertIdentifier? = nil)
}
extension alertUI.AlertStruct : Swift.Equatable {
  public static func == (lhs: alertUI.AlertStruct, rhs: alertUI.AlertStruct) -> Swift.Bool
}
extension alertUI.Priority : Swift.Equatable {}
extension alertUI.Priority : Swift.Hashable {}
extension alertUI.Priority : Swift.RawRepresentable {}
