// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Tools
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import OSLog
import Swift
@_exported import Tools
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers open class RegexMatcher {
  public enum RegexExpressions : Swift.String {
    case regex_pasToken
    public func groupKeys() -> [Swift.String]
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func match(with regexPattern: Tools.RegexMatcher.RegexExpressions, in url: Swift.String, keys: [Swift.String]) -> Swift.Dictionary<Swift.String, Any?>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objc final public class SDKLogger : ObjectiveC.NSObject {
  @objc public static func log(event: Tools.PTLoggerTags, level: os.OSLogType, message: Swift.String)
  @objc deinit
}
extension os.Logger {
  public init(category: Swift.String)
}
extension Tools.RegexMatcher.RegexExpressions : Swift.Equatable {}
extension Tools.RegexMatcher.RegexExpressions : Swift.Hashable {}
extension Tools.RegexMatcher.RegexExpressions : Swift.RawRepresentable {}
