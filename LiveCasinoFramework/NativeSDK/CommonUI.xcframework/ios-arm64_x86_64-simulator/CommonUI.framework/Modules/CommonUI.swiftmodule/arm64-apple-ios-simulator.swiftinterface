// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CommonUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CommonUI
import Foundation
import ImageKit
import Swift
import Tools
import Translations
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DropdownAlertView : CommonUI.AlertView {
  @_Concurrency.MainActor(unsafe) public var selectedOptionIndex: Swift.UInt? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static func instantiate(message: CommonUI.AlertLabelTitle? = nil, arrowImageResource: CommonUI.PTUResourceObjectStyleImageView? = nil, isHiddenDropDown: Swift.Bool, dropdownOptions: [Swift.String], style: CommonUI.PTUStyleView, actions: [CommonUI.AlertAction]) -> CommonUI.DropdownAlertView?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CommonUI.DropdownAlertView : CommonUI.TTTAttributedLabelDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func attributedLabel(_ label: CommonUI.TTTAttributedLabel!, didSelectLinkWith url: Foundation.URL!)
}
@objc open class AlertGameModel : ObjectiveC.NSObject {
  final public let gameIdenifier: Swift.String
  final public let gameIconUrl: Foundation.URL?
  final public let defaultIconUrl: Foundation.URL?
  final public let onSelect: (CommonUI.AlertGameModel) -> Swift.Void
  public init(gameIdenifier: Swift.String, gameIconUrl: Foundation.URL?, defaultIconUrl: Foundation.URL?, onSelect: @escaping (CommonUI.AlertGameModel) -> Swift.Void)
  public func triggerSelection()
  @objc deinit
}
open class PTUStyleObjectResourceEnhancedMessage : CommonUI.PTUResourceObjectStyle<CommonUI.PTUStyleEnhancedMessage, Swift.AnyObject> {
  public init?(content: CommonUI.PTUStyleEnhancedMessage, closeButtonResource: CommonUI.PTUResourceObjectStyleButton?)
  @objc deinit
}
open class PTUStyleResourceWebNavigationPanel : CommonUI.PTUResourceObjectStyle<CommonUI.PTUStyleWebViewNavBar, Swift.AnyObject> {
  public var forwardButtonResource: CommonUI.PTUResourceObjectStyleButton? {
    get
  }
  public var backButtonResource: CommonUI.PTUResourceObjectStyleButton? {
    get
  }
  public init?(content: CommonUI.PTUStyleWebViewNavBar, forwardButtonResource: CommonUI.PTUResourceObjectStyleButton?, backButtonResource: CommonUI.PTUResourceObjectStyleButton?)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static func instantiate<Instanse>() -> Instanse? where Instanse : UIKit.UIView
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GamesListAlertView : CommonUI.AlertView {
  @_Concurrency.MainActor(unsafe) public static func instantiate(title: Swift.String?, message: Swift.String?, games: [CommonUI.AlertGameModel], style: CommonUI.PTUStyleAlert, actions: [CommonUI.AlertAction]) -> CommonUI.GamesListAlertView?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CommonUI.GamesListAlertView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
public enum ToasterMessageviewResult {
  case closeMessage
  case openUrl(Foundation.URL)
  case clickedOnMessage
  case readMore
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ToasterMessageView : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public var messageId: Swift.String
  @_Concurrency.MainActor(unsafe) public var completion: ((CommonUI.ToasterMessageviewResult) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public static func instantiate(messageId: Swift.String, message: Swift.String, imageUrl: Foundation.URL? = nil, shouldHiddeCloseButton: Swift.Bool, style: CommonUI.PTUStyleToaster?, closeButtonStyleResource: CommonUI.PTUResourceObjectStyleButton?, completion: @escaping (CommonUI.ToasterMessageviewResult) -> Swift.Void) -> CommonUI.ToasterMessageView?
  @_Concurrency.MainActor(unsafe) public func animateAppearing()
  @_Concurrency.MainActor(unsafe) public func animateDismissing(_ completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CommonUI.ToasterMessageView : CommonUI.TTTAttributedLabelDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func attributedLabelDidTap(_ label: CommonUI.TTTAttributedLabel!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func attributedLabel(_ label: CommonUI.TTTAttributedLabel!, didSelectLinkWith url: Foundation.URL!)
}
public enum EnhancedMessageAlertViewResult {
  case openUrl(Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class EnhancedMessageAlertView : CommonUI.AlertView {
  @_Concurrency.MainActor(unsafe) public static func instantiate(title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: CommonUI.PTUStyleEnhancedMessage, closeAction: CommonUI.AlertAction?, actions: [CommonUI.AlertAction], completion: @escaping (CommonUI.EnhancedMessageAlertViewResult) -> Swift.Void) -> CommonUI.EnhancedMessageAlertView?
  @_Concurrency.MainActor(unsafe) override open func setup(actions: [CommonUI.AlertAction])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CommonUI.EnhancedMessageAlertView : CommonUI.TTTAttributedLabelDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func attributedLabel(_ label: CommonUI.TTTAttributedLabel!, didSelectLinkWith url: Foundation.URL!)
}
public typealias AlertMessageviewHandler = (CommonUI.AlertMessageviewResult) -> Swift.Void
public enum AlertMessageviewResult {
  case openUrl(Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DefaultAlertView : CommonUI.AlertView {
  @_Concurrency.MainActor(unsafe) public var actionHandler: CommonUI.AlertMessageviewHandler?
  @_Concurrency.MainActor(unsafe) public static func instantiate(title: CommonUI.AlertLabelTitle?, message: CommonUI.AlertLabelTitle?, style: CommonUI.PTUStyleView, actions: [CommonUI.AlertAction], actionHandler: CommonUI.AlertMessageviewHandler?) -> CommonUI.DefaultAlertView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CommonUI.DefaultAlertView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
@objc open class AlertLabelTitle : ObjectiveC.NSObject {
  final public let title: Swift.String
  final public let style: CommonUI.PTUStyleLabel
  public init(title: Swift.String, style: CommonUI.PTUStyleLabel)
  @objc deinit
}
@objc open class AlertTextViewMessage : ObjectiveC.NSObject {
  final public let message: Swift.String
  final public let style: CommonUI.PTUStyleTextView
  public init(message: Swift.String, style: CommonUI.PTUStyleTextView)
  @objc deinit
}
public enum AlertButtonType {
  case neutral
  case negative
  case positive
  case checkbox
  public static func == (a: CommonUI.AlertButtonType, b: CommonUI.AlertButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc open class AlertAction : ObjectiveC.NSObject {
  public var title: Swift.String
  public var handler: ((CommonUI.AlertAction) -> Swift.Void)?
  public var styleResource: CommonUI.PTUResourceObjectStyleButton?
  weak public var alertView: CommonUI.AlertView?
  public var type: CommonUI.AlertButtonType
  public init(title: Swift.String, type: CommonUI.AlertButtonType = .neutral, styleResource: CommonUI.PTUResourceObjectStyleButton? = nil, handler: ((CommonUI.AlertAction) -> Swift.Void)? = nil)
  @objc deinit
}
@_Concurrency.MainActor(unsafe) open class AlertButton : CommonUI.PTUCommonButton {
  @_Concurrency.MainActor(unsafe) public init(action: CommonUI.AlertAction, size: CommonUI.AlertButton.Size)
  @_Concurrency.MainActor(unsafe) convenience public init(action: CommonUI.AlertAction)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension CommonUI.AlertButton {
  public struct Size {
  }
}
@_hasMissingDesignatedInitializers open class AlertDoNotShowAgain {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class AlertView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var onCompletion: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var actions: [CommonUI.AlertAction]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setup(actions: [CommonUI.AlertAction])
  @_Concurrency.MainActor(unsafe) open func setup(containerStyle: CommonUI.PTUStyleView)
  @objc deinit
}
extension CommonUI.AlertButtonType : Swift.Equatable {}
extension CommonUI.AlertButtonType : Swift.Hashable {}
