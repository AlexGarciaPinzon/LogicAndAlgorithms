// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ImageKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import ImageKit
import Swift
import Tools
import TwitterImagePipeline
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc open class PTImageKit : ObjectiveC.NSObject, ImageKit.ImageKitProtocol, TwitterImagePipeline.TIPImagePipelineObserver, TwitterImagePipeline.TIPImageAdditionalCache {
  @objc public static let sharedInstance: ImageKit.PTImageKit
  @objc public func tip_imageFetchOperationDidStart(_ op: TwitterImagePipeline.TIPImageFetchOperation)
  @objc public func tip_imageFetchOperationDidFinish(_ op: TwitterImagePipeline.TIPImageFetchOperation)
  @objc public func tip_imageFetchOperation(_ op: TwitterImagePipeline.TIPImageFetchOperation, didStartDownloadingImageAt URL: Foundation.URL)
  @objc public func tip_imageFetchOperation(_ op: TwitterImagePipeline.TIPImageFetchOperation, didFinishDownloadingImageAt URL: Foundation.URL, imageType type: Swift.String, sizeInBytes byteSize: Swift.UInt, dimensions: CoreFoundation.CGSize, wasResumed: Swift.Bool)
  @discardableResult
  @objc public func image(with request: ImageKit.ImageKitFetchRequest, completion: @escaping (ImageKit.ImageFetchResult) -> ()) -> ImageKit.CancellableImageFetch
  @discardableResult
  @objc public func images(with requests: [ImageKit.ImageKitFetchRequest], completion: @escaping (([ImageKit.ImageFetchResult]) -> ())) -> ImageKit.CancellableImageFetch
  @objc public func image(with request: ImageKit.ImageKitFetchRequest) -> ImageKit.ImageFetchResult
  @objc public func images(with requests: [ImageKit.ImageKitFetchRequest]) -> [ImageKit.ImageFetchResult]
  @objc public func cacheImage(_ image: UIKit.UIImage, for url: Foundation.URL)
  @objc public func cachedImage(for url: Foundation.URL) -> UIKit.UIImage?
  @objc public func invalidateCache(for url: Foundation.URL)
  @objc public func invalidateCaches()
  @objc public func tip_retrieveImage(for URL: Foundation.URL, completion: @escaping TwitterImagePipeline.TIPImageAdditionalCacheFetchCompletion)
  @objc deinit
}
extension ImageKit.ImageKitProtocol {
  public func logPermanentCacheFiles()
}
public let ImageKit: any ImageKit.ImageKitProtocol
@objc public protocol ImageKitProtocol {
  @objc @discardableResult
  func image(with request: ImageKit.ImageKitFetchRequest, completion: @escaping (ImageKit.ImageFetchResult) -> ()) -> ImageKit.CancellableImageFetch
  @objc @discardableResult
  func images(with requests: [ImageKit.ImageKitFetchRequest], completion: @escaping (([ImageKit.ImageFetchResult]) -> ())) -> ImageKit.CancellableImageFetch
  @objc func image(with request: ImageKit.ImageKitFetchRequest) -> ImageKit.ImageFetchResult
  @objc func images(with requests: [ImageKit.ImageKitFetchRequest]) -> [ImageKit.ImageFetchResult]
  @objc func invalidateCache(for url: Foundation.URL)
  @objc func invalidateCaches()
  @objc func cacheImage(_ image: UIKit.UIImage, for url: Foundation.URL)
  @objc func cachedImage(for url: Foundation.URL) -> UIKit.UIImage?
}
@objc public class ImageKitFetchRequest : ObjectiveC.NSObject {
  final public let url: Foundation.URL
  final public let resizing: ImageKit.ImageResizing
  final public let usePermanentCache: Swift.Bool
  @objc public init(url: Foundation.URL, resizing: ImageKit.ImageResizing, usePermanentCache: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ImageFetchResult : ObjectiveC.NSObject {
  @objc final public let image: UIKit.UIImage?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ImageResizing : ObjectiveC.NSObject {
  @objc public static func resize(to size: CoreFoundation.CGSize, with contentMode: UIKit.UIView.ContentMode) -> ImageKit.ImageResizing
  @objc public static func disabledResizing() -> ImageKit.ImageResizing
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CancellableImageFetch : ObjectiveC.NSObject {
  @objc public func cancelImageDownload()
  @objc override dynamic public init()
  @objc deinit
}
extension ImageKit.CancellableImageFetch : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
