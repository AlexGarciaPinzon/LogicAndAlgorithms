#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef LIVECASINO_SWIFT_H
#define LIVECASINO_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LiveCasino",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSURL;
enum LCLanguageCode : NSInteger;
@class NSNumber;

SWIFT_CLASS("_TtC10LiveCasino8LCConfig")
@interface LCConfig : NSObject
/// Casino name
@property (nonatomic, readonly, copy) NSString * _Nonnull casinoName;
/// Live server endpoint urls (web socket urls)
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull endpoints;
/// Use preview mode
@property (nonatomic, readonly) BOOL previewMode;
/// Language code to be used
@property (nonatomic, readonly) enum LCLanguageCode languageCode;
/// [optional] Base url to loader, if it’s absent default one is used
@property (nonatomic, readonly, copy) NSURL * _Nullable loaderBaseUrl;
/// [optional] IMS client type to override default value (“live”)
@property (nonatomic, readonly, copy) NSString * _Nullable imsClientType;
/// [optional] IMS delivery platform to override default value (“html5”; supported values are “native”, “wrapper”, “html5”)
@property (nonatomic, readonly, copy) NSString * _Nullable imsDeliveryPlatform;
/// [optional] IMS client skin to override default value (that equals casino name)
@property (nonatomic, readonly, copy) NSString * _Nullable imsClientSkin;
/// [optional] Key of client configuration in Live admin
@property (nonatomic, readonly, copy) NSString * _Nullable configurationKey;
/// [optional] String to identify wrapper application
@property (nonatomic, readonly, copy) NSString * _Nonnull wrapperIdentifier;
/// [optional] Create local web server over https or http, default is true (@YES, for https)
@property (nonatomic, readonly, strong) NSNumber * _Nullable useTLS;
/// [optional] Game code of origin-game, used for cross-launch
@property (nonatomic, readonly, copy) NSString * _Nullable originGame;
/// Config object constructor (without cross-launch originGame)
/// \param casinoName casino name
///
/// \param endpoints array of live server endpoint urls (web socket urls)
///
/// \param previewMode Bool to enable priview mode
///
/// \param languageCode language code
///
/// \param loaderBaseUrl [optional] base url to loader, if absent default one is used
///
/// \param imsClientType [optional] IMS client type to override default one “live”
///
/// \param imsClientSkin [optional] IMS client skin to override default value which equals casino name
///
/// \param imsDeliveryPlatform [optional] IMS delivery platform to override default value (“html5”; supported values are “native”, “wrapper”, “html5”)
///
/// \param configurationKey [optional] Key of client configuration in Live admin
///
/// \param wrapperIdentifier String to identify wrapper application
///
/// \param useTLS [optional] Create local web server over https or http, default is true (@YES, for https)
///
- (nonnull instancetype)initWithCasinoName:(NSString * _Nonnull)casinoName endpoints:(NSArray<NSURL *> * _Nonnull)endpoints previewMode:(BOOL)previewMode languageCode:(enum LCLanguageCode)languageCode loaderBaseUrl:(NSURL * _Nullable)loaderBaseUrl imsClientType:(NSString * _Nullable)imsClientType imsClientSkin:(NSString * _Nullable)imsClientSkin imsDeliveryPlatform:(NSString * _Nullable)imsDeliveryPlatform configurationKey:(NSString * _Nullable)configurationKey wrapperIdentifier:(NSString * _Nonnull)wrapperIdentifier useTLS:(NSNumber * _Nullable)useTLS;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC10LiveCasino11LCGameLimit")
@interface LCGameLimit : NSObject
/// min limit value (in cents)
@property (nonatomic, readonly) int64_t min;
/// max limit value (in cents)
@property (nonatomic, readonly) int64_t max;
/// Create game limit with min and max values in cents
- (nonnull instancetype)initWithMin:(int64_t)min max:(int64_t)max OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LCLanguageCode, open) {
  LCLanguageCodeEN = 0,
  LCLanguageCodeBG = 1,
  LCLanguageCodeCH = 2,
  LCLanguageCodeCS = 3,
  LCLanguageCodeDA = 4,
  LCLanguageCodeDE = 5,
  LCLanguageCodeES = 6,
  LCLanguageCodeESMX = 7,
  LCLanguageCodeFI = 8,
  LCLanguageCodeFR = 9,
  LCLanguageCodeID = 10,
  LCLanguageCodeIT = 11,
  LCLanguageCodeJA = 12,
  LCLanguageCodeKO = 13,
  LCLanguageCodeMS = 14,
  LCLanguageCodeNL = 15,
  LCLanguageCodeRO = 16,
  LCLanguageCodeRU = 17,
  LCLanguageCodeSK = 18,
  LCLanguageCodeSV = 19,
  LCLanguageCodeZHCN = 20,
  LCLanguageCodeTH = 21,
  LCLanguageCodeVI = 22,
  LCLanguageCodePT = 23,
  LCLanguageCodeET = 24,
  LCLanguageCodeEL = 25,
  LCLanguageCodeNO = 26,
  LCLanguageCodePL = 27,
};


/// Base class for all available launch variants:
/// <ul>
///   <li>
///     LCLaunchVariantAlias to use launch alias
///   </li>
///   <li>
///     [deprecated] NLLaunchVariantLobby to open lobby (fully equal to LCLaunchVariantAlias)
///   </li>
///   <li>
///     LCLaunchVariantTable to launch table (optionally with game limits and preferred seat)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10LiveCasino15LCLaunchVariant")
@interface LCLaunchVariant : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC10LiveCasino20LCLaunchVariantAlias")
@interface LCLaunchVariantAlias : LCLaunchVariant
/// Launch alias string (either for opening lobby or table direct launch)
@property (nonatomic, readonly, copy) NSString * _Nonnull launchAlias;
/// init method to create launch variant with exact launchAlias
/// \param launchAlias Launch alias string (results in opening lobby or table direct launch)
///
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nonnull)launchAlias OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10LiveCasino20LCLaunchVariantLobby")
@interface LCLaunchVariantLobby : LCLaunchVariant
@property (nonatomic, readonly, copy) NSString * _Nullable launchAlias;
/// init method to create launch variant with category launchAlias
/// \param launchAlias [optional]  Launch alias string to category
///
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nullable)launchAlias OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10LiveCasino20LCLaunchVariantTable")
@interface LCLaunchVariantTable : LCLaunchVariantAlias
/// [optional] game limit (to be used if launch alias is for launching table)
@property (nonatomic, readonly, strong) LCGameLimit * _Nullable gameLimit;
/// Preferred seatId. Possible values:
/// <ul>
///   <li>
///     7 seats Blackjack:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0: reserved for dealer, don’t use
///       </li>
///       <li>
///         1…7: join at the seat
///       </li>
///       <li>
///         nil: join as watcher (without taking a seat)
///       </li>
///     </ul>
///   </li>
///   <li>
///     7 seats Baccarat:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0…6: join at the seat
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) NSNumber * _Nullable preferredSeat;
/// Create launch variant to  open a game
/// \param launchAlias Launch alias string
///
/// \param gameLimit [optional] game limit for launching a game
///
/// \param preferredSeat [optional] Preferred seatId. Possible values:
/// <ul>
///   <li>
///     7 seats Blackjack:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0: reserved for dealer, don’t use
///       </li>
///       <li>
///         1…7: join at the seat
///       </li>
///       <li>
///         nil: join as watcher (without taking a seat)
///       </li>
///     </ul>
///   </li>
///   <li>
///     7 seats Baccarat:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0…6: join at the seat
///       </li>
///     </ul>
///   </li>
/// </ul>
///
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nonnull)launchAlias gameLimit:(LCGameLimit * _Nullable)gameLimit preferredSeat:(NSNumber * _Nullable)preferredSeat OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nonnull)launchAlias SWIFT_UNAVAILABLE;
@end


@class LCTokenData;
@protocol LCRootViewControllerDelegate;
@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC10LiveCasino20LCRootViewController")
@interface LCRootViewController : UIViewController
/// Init method for Live Casino entry point
/// \param configuration LiveCasino framework configuration
///
/// \param launchVariant launch variant (one of NLLaunchVariant subclasses)
///
/// \param tokenData Valid token acceptable by IMS, Live server uses the token to login
///
- (nonnull instancetype)initWithConfig:(LCConfig * _Nonnull)config launchVariant:(LCLaunchVariant * _Nonnull)launchVariant tokenData:(LCTokenData * _Nonnull)tokenData delegate:(id <LCRootViewControllerDelegate> _Nonnull)delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Try to stop Live Casino.
/// \param callback used to notify result of stop (NO if Live Casino can’t be stopped)
///
- (void)tryStopWithCallback:(void (^ _Nullable)(BOOL))callback;
/// Schedule Live Casino stop to be performed once it is possible
- (void)scheduleStopWithCallback:(void (^ _Nullable)(void))callback;
- (void)viewDidLoad;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

@interface LCRootViewController (SWIFT_EXTENSION(LiveCasino)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
@end

@class WKFrameInfo;

@interface LCRootViewController (SWIFT_EXTENSION(LiveCasino)) <WKUIDelegate>
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptTextInputPanelWithPrompt:(NSString * _Nonnull)prompt defaultText:(NSString * _Nullable)defaultText initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptAlertPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptConfirmPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
@end


SWIFT_PROTOCOL("_TtP10LiveCasino28LCRootViewControllerDelegate_")
@protocol LCRootViewControllerDelegate <NSObject>
/// Notifies when Live Casino has stopped, possible reasons:
/// <ul>
///   <li>
///     After -tryStop/-scheduleStop when all required UI is shown without error (there are requirements for some
///     regulations to show UI before user can actually leave the game)
///   </li>
///   <li>
///     After inactivity timeout or network disconnect (without error)
///   </li>
///   <li>
///     Launch error
///   </li>
/// </ul>
/// \param error [optional] error if Live Casino has stopped accidentally (NSLocalizedDescriptionKey has correct message
/// that can be shown to user)
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root didStopWithError:(NSError * _Nullable)didStopWithError;
/// Live Casino needs to open url externally
/// \param urlString page url to be opened
///
/// \param title [optional] page title to be shown
///
/// \param type [optional] it is return this value of menuitem
/// <ul>
///   <li>
///     Home = ‘Home’,
///   </li>
///   <li>
///     Cashier = ‘Cashier’,
///   </li>
///   <li>
///     History = ‘History’,
///   </li>
///   <li>
///     Balance = ‘Balance’,
///   </li>
///   <li>
///     Game = ‘Game’,
///   </li>
///   <li>
///     Regulations = ‘Regulations’,
///   </li>
///   <li>
///     ResponsibleGambling = ‘Responsible Gambling’,
///   </li>
///   <li>
///     CustomerSupport = ‘Customer Support’,
///   </li>
///   <li>
///     Unknown = “”
///   </li>
/// </ul>
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root needOpenUrl:(NSString * _Nonnull)needOpenUrl withTitle:(NSString * _Nullable)withTitle type:(NSString * _Nullable)type;
@optional
/// Cross launch is initiated by the user inside Live Casino.
/// warning:
/// Do not implement this <em>OPTIONAL</em> delegate method if native cross-launch is not supported
/// \param gameCode game code of the game to be opened
///
/// \param originGame launch alias of currently opened Live game (nil for lobby)
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root onCrossLaunchWithGameCode:(NSString * _Nonnull)onCrossLaunchWithGameCode originGame:(NSString * _Nullable)originGame;
/// opening of game through floating lobby delegated to wrapper application/sdk.
/// warning:
/// Do not implement this <em>OPTIONAL</em> if wrapper shouldn’t support delegation of live game launching
/// \param gameCode game code of the game to be opened
///
/// \param launchAlias launch alias of game that should be opened
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root onGameChanged:(NSString * _Nonnull)gameCode launchAlias:(NSString * _Nonnull)launchAlias;
@end

enum LCTokenType : NSInteger;

/// Token data acceptable by IMS
SWIFT_CLASS("_TtC10LiveCasino11LCTokenData")
@interface LCTokenData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly) enum LCTokenType type;
/// Token data constructor
/// \param username username for the token
///
/// \param token token string value
///
/// \param type type of token used for login
///
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username token:(NSString * _Nonnull)token type:(enum LCTokenType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, LCTokenType, open) {
/// Temporary session token type
  LCTokenTypeTemp = 0,
/// External token type
  LCTokenTypeExternal = 1,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef LIVECASINO_SWIFT_H
#define LIVECASINO_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LiveCasino",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSURL;
enum LCLanguageCode : NSInteger;
@class NSNumber;

SWIFT_CLASS("_TtC10LiveCasino8LCConfig")
@interface LCConfig : NSObject
/// Casino name
@property (nonatomic, readonly, copy) NSString * _Nonnull casinoName;
/// Live server endpoint urls (web socket urls)
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull endpoints;
/// Use preview mode
@property (nonatomic, readonly) BOOL previewMode;
/// Language code to be used
@property (nonatomic, readonly) enum LCLanguageCode languageCode;
/// [optional] Base url to loader, if it’s absent default one is used
@property (nonatomic, readonly, copy) NSURL * _Nullable loaderBaseUrl;
/// [optional] IMS client type to override default value (“live”)
@property (nonatomic, readonly, copy) NSString * _Nullable imsClientType;
/// [optional] IMS delivery platform to override default value (“html5”; supported values are “native”, “wrapper”, “html5”)
@property (nonatomic, readonly, copy) NSString * _Nullable imsDeliveryPlatform;
/// [optional] IMS client skin to override default value (that equals casino name)
@property (nonatomic, readonly, copy) NSString * _Nullable imsClientSkin;
/// [optional] Key of client configuration in Live admin
@property (nonatomic, readonly, copy) NSString * _Nullable configurationKey;
/// [optional] String to identify wrapper application
@property (nonatomic, readonly, copy) NSString * _Nonnull wrapperIdentifier;
/// [optional] Create local web server over https or http, default is true (@YES, for https)
@property (nonatomic, readonly, strong) NSNumber * _Nullable useTLS;
/// [optional] Game code of origin-game, used for cross-launch
@property (nonatomic, readonly, copy) NSString * _Nullable originGame;
/// Config object constructor (without cross-launch originGame)
/// \param casinoName casino name
///
/// \param endpoints array of live server endpoint urls (web socket urls)
///
/// \param previewMode Bool to enable priview mode
///
/// \param languageCode language code
///
/// \param loaderBaseUrl [optional] base url to loader, if absent default one is used
///
/// \param imsClientType [optional] IMS client type to override default one “live”
///
/// \param imsClientSkin [optional] IMS client skin to override default value which equals casino name
///
/// \param imsDeliveryPlatform [optional] IMS delivery platform to override default value (“html5”; supported values are “native”, “wrapper”, “html5”)
///
/// \param configurationKey [optional] Key of client configuration in Live admin
///
/// \param wrapperIdentifier String to identify wrapper application
///
/// \param useTLS [optional] Create local web server over https or http, default is true (@YES, for https)
///
- (nonnull instancetype)initWithCasinoName:(NSString * _Nonnull)casinoName endpoints:(NSArray<NSURL *> * _Nonnull)endpoints previewMode:(BOOL)previewMode languageCode:(enum LCLanguageCode)languageCode loaderBaseUrl:(NSURL * _Nullable)loaderBaseUrl imsClientType:(NSString * _Nullable)imsClientType imsClientSkin:(NSString * _Nullable)imsClientSkin imsDeliveryPlatform:(NSString * _Nullable)imsDeliveryPlatform configurationKey:(NSString * _Nullable)configurationKey wrapperIdentifier:(NSString * _Nonnull)wrapperIdentifier useTLS:(NSNumber * _Nullable)useTLS;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC10LiveCasino11LCGameLimit")
@interface LCGameLimit : NSObject
/// min limit value (in cents)
@property (nonatomic, readonly) int64_t min;
/// max limit value (in cents)
@property (nonatomic, readonly) int64_t max;
/// Create game limit with min and max values in cents
- (nonnull instancetype)initWithMin:(int64_t)min max:(int64_t)max OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LCLanguageCode, open) {
  LCLanguageCodeEN = 0,
  LCLanguageCodeBG = 1,
  LCLanguageCodeCH = 2,
  LCLanguageCodeCS = 3,
  LCLanguageCodeDA = 4,
  LCLanguageCodeDE = 5,
  LCLanguageCodeES = 6,
  LCLanguageCodeESMX = 7,
  LCLanguageCodeFI = 8,
  LCLanguageCodeFR = 9,
  LCLanguageCodeID = 10,
  LCLanguageCodeIT = 11,
  LCLanguageCodeJA = 12,
  LCLanguageCodeKO = 13,
  LCLanguageCodeMS = 14,
  LCLanguageCodeNL = 15,
  LCLanguageCodeRO = 16,
  LCLanguageCodeRU = 17,
  LCLanguageCodeSK = 18,
  LCLanguageCodeSV = 19,
  LCLanguageCodeZHCN = 20,
  LCLanguageCodeTH = 21,
  LCLanguageCodeVI = 22,
  LCLanguageCodePT = 23,
  LCLanguageCodeET = 24,
  LCLanguageCodeEL = 25,
  LCLanguageCodeNO = 26,
  LCLanguageCodePL = 27,
};


/// Base class for all available launch variants:
/// <ul>
///   <li>
///     LCLaunchVariantAlias to use launch alias
///   </li>
///   <li>
///     [deprecated] NLLaunchVariantLobby to open lobby (fully equal to LCLaunchVariantAlias)
///   </li>
///   <li>
///     LCLaunchVariantTable to launch table (optionally with game limits and preferred seat)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10LiveCasino15LCLaunchVariant")
@interface LCLaunchVariant : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC10LiveCasino20LCLaunchVariantAlias")
@interface LCLaunchVariantAlias : LCLaunchVariant
/// Launch alias string (either for opening lobby or table direct launch)
@property (nonatomic, readonly, copy) NSString * _Nonnull launchAlias;
/// init method to create launch variant with exact launchAlias
/// \param launchAlias Launch alias string (results in opening lobby or table direct launch)
///
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nonnull)launchAlias OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10LiveCasino20LCLaunchVariantLobby")
@interface LCLaunchVariantLobby : LCLaunchVariant
@property (nonatomic, readonly, copy) NSString * _Nullable launchAlias;
/// init method to create launch variant with category launchAlias
/// \param launchAlias [optional]  Launch alias string to category
///
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nullable)launchAlias OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC10LiveCasino20LCLaunchVariantTable")
@interface LCLaunchVariantTable : LCLaunchVariantAlias
/// [optional] game limit (to be used if launch alias is for launching table)
@property (nonatomic, readonly, strong) LCGameLimit * _Nullable gameLimit;
/// Preferred seatId. Possible values:
/// <ul>
///   <li>
///     7 seats Blackjack:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0: reserved for dealer, don’t use
///       </li>
///       <li>
///         1…7: join at the seat
///       </li>
///       <li>
///         nil: join as watcher (without taking a seat)
///       </li>
///     </ul>
///   </li>
///   <li>
///     7 seats Baccarat:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0…6: join at the seat
///       </li>
///     </ul>
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) NSNumber * _Nullable preferredSeat;
/// Create launch variant to  open a game
/// \param launchAlias Launch alias string
///
/// \param gameLimit [optional] game limit for launching a game
///
/// \param preferredSeat [optional] Preferred seatId. Possible values:
/// <ul>
///   <li>
///     7 seats Blackjack:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0: reserved for dealer, don’t use
///       </li>
///       <li>
///         1…7: join at the seat
///       </li>
///       <li>
///         nil: join as watcher (without taking a seat)
///       </li>
///     </ul>
///   </li>
///   <li>
///     7 seats Baccarat:
///     <ul>
///       <li>
///         -1: join at some free seat
///       </li>
///       <li>
///         0…6: join at the seat
///       </li>
///     </ul>
///   </li>
/// </ul>
///
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nonnull)launchAlias gameLimit:(LCGameLimit * _Nullable)gameLimit preferredSeat:(NSNumber * _Nullable)preferredSeat OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLaunchAlias:(NSString * _Nonnull)launchAlias SWIFT_UNAVAILABLE;
@end


@class LCTokenData;
@protocol LCRootViewControllerDelegate;
@class NSCoder;
@class NSBundle;

SWIFT_CLASS("_TtC10LiveCasino20LCRootViewController")
@interface LCRootViewController : UIViewController
/// Init method for Live Casino entry point
/// \param configuration LiveCasino framework configuration
///
/// \param launchVariant launch variant (one of NLLaunchVariant subclasses)
///
/// \param tokenData Valid token acceptable by IMS, Live server uses the token to login
///
- (nonnull instancetype)initWithConfig:(LCConfig * _Nonnull)config launchVariant:(LCLaunchVariant * _Nonnull)launchVariant tokenData:(LCTokenData * _Nonnull)tokenData delegate:(id <LCRootViewControllerDelegate> _Nonnull)delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Try to stop Live Casino.
/// \param callback used to notify result of stop (NO if Live Casino can’t be stopped)
///
- (void)tryStopWithCallback:(void (^ _Nullable)(BOOL))callback;
/// Schedule Live Casino stop to be performed once it is possible
- (void)scheduleStopWithCallback:(void (^ _Nullable)(void))callback;
- (void)viewDidLoad;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKWebView;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

@interface LCRootViewController (SWIFT_EXTENSION(LiveCasino)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
@end

@class WKFrameInfo;

@interface LCRootViewController (SWIFT_EXTENSION(LiveCasino)) <WKUIDelegate>
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptTextInputPanelWithPrompt:(NSString * _Nonnull)prompt defaultText:(NSString * _Nullable)defaultText initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptAlertPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView runJavaScriptConfirmPanelWithMessage:(NSString * _Nonnull)message initiatedByFrame:(WKFrameInfo * _Nonnull)frame completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
@end


SWIFT_PROTOCOL("_TtP10LiveCasino28LCRootViewControllerDelegate_")
@protocol LCRootViewControllerDelegate <NSObject>
/// Notifies when Live Casino has stopped, possible reasons:
/// <ul>
///   <li>
///     After -tryStop/-scheduleStop when all required UI is shown without error (there are requirements for some
///     regulations to show UI before user can actually leave the game)
///   </li>
///   <li>
///     After inactivity timeout or network disconnect (without error)
///   </li>
///   <li>
///     Launch error
///   </li>
/// </ul>
/// \param error [optional] error if Live Casino has stopped accidentally (NSLocalizedDescriptionKey has correct message
/// that can be shown to user)
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root didStopWithError:(NSError * _Nullable)didStopWithError;
/// Live Casino needs to open url externally
/// \param urlString page url to be opened
///
/// \param title [optional] page title to be shown
///
/// \param type [optional] it is return this value of menuitem
/// <ul>
///   <li>
///     Home = ‘Home’,
///   </li>
///   <li>
///     Cashier = ‘Cashier’,
///   </li>
///   <li>
///     History = ‘History’,
///   </li>
///   <li>
///     Balance = ‘Balance’,
///   </li>
///   <li>
///     Game = ‘Game’,
///   </li>
///   <li>
///     Regulations = ‘Regulations’,
///   </li>
///   <li>
///     ResponsibleGambling = ‘Responsible Gambling’,
///   </li>
///   <li>
///     CustomerSupport = ‘Customer Support’,
///   </li>
///   <li>
///     Unknown = “”
///   </li>
/// </ul>
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root needOpenUrl:(NSString * _Nonnull)needOpenUrl withTitle:(NSString * _Nullable)withTitle type:(NSString * _Nullable)type;
@optional
/// Cross launch is initiated by the user inside Live Casino.
/// warning:
/// Do not implement this <em>OPTIONAL</em> delegate method if native cross-launch is not supported
/// \param gameCode game code of the game to be opened
///
/// \param originGame launch alias of currently opened Live game (nil for lobby)
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root onCrossLaunchWithGameCode:(NSString * _Nonnull)onCrossLaunchWithGameCode originGame:(NSString * _Nullable)originGame;
/// opening of game through floating lobby delegated to wrapper application/sdk.
/// warning:
/// Do not implement this <em>OPTIONAL</em> if wrapper shouldn’t support delegation of live game launching
/// \param gameCode game code of the game to be opened
///
/// \param launchAlias launch alias of game that should be opened
///
- (void)liveCasinoRoot:(LCRootViewController * _Nonnull)root onGameChanged:(NSString * _Nonnull)gameCode launchAlias:(NSString * _Nonnull)launchAlias;
@end

enum LCTokenType : NSInteger;

/// Token data acceptable by IMS
SWIFT_CLASS("_TtC10LiveCasino11LCTokenData")
@interface LCTokenData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull username;
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
@property (nonatomic, readonly) enum LCTokenType type;
/// Token data constructor
/// \param username username for the token
///
/// \param token token string value
///
/// \param type type of token used for login
///
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username token:(NSString * _Nonnull)token type:(enum LCTokenType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, LCTokenType, open) {
/// Temporary session token type
  LCTokenTypeTemp = 0,
/// External token type
  LCTokenTypeExternal = 1,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
